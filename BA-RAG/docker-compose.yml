version: '3.8'

services:
  graphql-chromadb-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: graphql-chromadb-pipeline
    restart: unless-stopped
    environment:
      # Required: GraphQL Configuration
      - GRAPHQL_ENDPOINT=${GRAPHQL_ENDPOINT}
      - GRAPHQL_HEADERS=${GRAPHQL_HEADERS:-{}}
      - GRAPHQL_QUERY=${GRAPHQL_QUERY:-}
      
      # Required: ChromaDB Configuration
      - CHROMADB_HOST=${CHROMADB_HOST:-localhost}
      - CHROMADB_PORT=${CHROMADB_PORT:-8000}
      - CHROMADB_COLLECTION=${CHROMADB_COLLECTION:-graphql_data}
      
      # Optional: Application Configuration
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      - SYNC_INTERVAL_SECONDS=${SYNC_INTERVAL_SECONDS:-300}
      - BATCH_SIZE=${BATCH_SIZE:-100}
      - RUN_MODE=${RUN_MODE:-continuous}
      - HEALTH_CHECK_ENABLED=${HEALTH_CHECK_ENABLED:-false}
      
      # Optional: Schema Auto-Discovery Configuration
      - AUTO_DISCOVER_SCHEMA=${AUTO_DISCOVER_SCHEMA:-true}
      - MAX_QUERY_DEPTH=${MAX_QUERY_DEPTH:-3}
      - EXCLUDED_TYPES=${EXCLUDED_TYPES:-}
      - INCLUDED_TYPES=${INCLUDED_TYPES:-}
      
      # Logging Configuration
      - PYTHONUNBUFFERED=1
      - PYTHONIOENCODING=utf-8
      
    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
      # Mount cache directory for model persistence
      - ./cache:/app/cache
      # Optional: Mount custom configuration files
      - ./config:/app/config:ro
      
    networks:
      - graphql-chromadb-network
      
    # Optional: Add depends_on if ChromaDB is also in compose
    # depends_on:
    #   - chromadb
    
    # Optional: Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Optional: Include ChromaDB service if you want to run it locally
  # chromadb:
  #   image: chromadb/chroma:latest
  #   container_name: chromadb
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - CHROMA_SERVER_HOST=0.0.0.0
  #     - CHROMA_SERVER_PORT=8000
  #   volumes:
  #     - chromadb_data:/chroma/chroma
  #   networks:
  #     - graphql-chromadb-network

networks:
  graphql-chromadb-network:
    driver: bridge

# Optional: Volumes for ChromaDB data persistence
# volumes:
#   chromadb_data: 